var net = require('./net.js');

////////////////////// TESTS //////////////////////
// PASSING
var nodeTest = [
    //should push position of node 0 to stack
    net.PUSH1, "00",
    net.node,
    net.DUP1,
    net.MLOAD,
    //should push position of node 1 to stack
    net.PUSH1, "01",
    net.node,
    net.DUP1,
    net.MLOAD,
    //should push position of node 2 to stack
    net.PUSH1, "02",
    net.node,
    net.DUP1,
    net.MLOAD,
].join("");

//PASSING
var portTest = [
    net.PUSH1, "00", // slot 0
    net.PUSH1, "00", // node 0
    net.port,
    net.PUSH1, "03", // slot 3 (kind)
    net.PUSH1, "00", // node 0
    net.port,
    net.PUSH1, "02", // slot 2
    net.PUSH1, "01", // node 1
    net.port,
    net.PUSH1, "02", // slot 2
    net.PUSH1, "02", // node 2
    net.port,
].join("");

//PASSING
var indexTest = [
    net.PUSH1, "03", // slot 0
    net.PUSH1, "00", // node 0
    net.port,
    net.DUP1,
    net.index,
    net.PUSH1, "03", // slot 0
    net.PUSH1, "00", // node 0
    net.index_ns,
    net.PUSH1, "03", // slot 0
    net.PUSH1, "00", // node 0
    net.port,
    net.index,
    net.port_i,
].join("");

//PASSING
var addrTest = [
    net.PUSH1, "00", // Node 0
    net.addr,
    net.PUSH1, "01", // Node 0
    net.addr,
    net.PUSH1, "04", // Node 1
    net.addr,
].join("");

//PASSING
var slotTest = [
    net.PUSH1, "01", // Slot 1
    net.PUSH1, "00", // Node 0
    net.port,
    net.slot,
    net.PUSH1, "02", // Slot 2
    net.PUSH1, "01", // Node 1
    net.port,
    net.slot,
    net.PUSH1, "00", // Slot 0
    net.PUSH1, "02", // Node 2
    net.port,
    net.slot,
    net.PUSH1, "03", // Slot 3 (kind)
    net.PUSH1, "02", // Node 2
    net.port,
    net.slot,
].join("");

//PASSING
var enterTest = [
    net.PUSH1, "00", // node 0
    net.PUSH1, "00", // slot 0
    net.port,
    net.DUP1,
    net.enter,
].join("");

// PASSING
var kindTest = [
    net.PUSH1, "00",
    net.kind,
    net.PUSH1, "01",
    net.kind,
].join("");

// PASSING
var linkTest = [
    // Before linking:
    net.PUSH1, "03", // slot 3
    net.PUSH1, "00", // node 0
    net.index_ns,
    net.MLOAD,
    net.PUSH1, "03", // slot 3
    net.PUSH1, "01", // node 1
    net.index_ns,
    net.MLOAD,

    // Link
    net.PUSH1, "02", // slot 2
    net.PUSH1, "00", // node 0
    net.port,
    net.PUSH1, "00", // slot 0
    net.PUSH1, "01", // node 1
    net.port,
    net.link,

    // After linking:
    net.PUSH1, "03", // slot 3
    net.PUSH1, "00", // node 0
    net.index_ns,
    net.MLOAD,
    net.PUSH1, "03", // slot 3
    net.PUSH1, "01", // node 1
    net.index_ns,
    net.MLOAD,

].join("");

// PASSING
var newNodeTest = [
    net.PUSH1, net.BUFFER_SIZE_POS,
    net.MLOAD,
    net.PUSH1, "ff", // kind = ff
    net.new_node, // create new node

    // get new_node_id
    net.PUSH1, net.BUFFER_SIZE_POS,
    net.MLOAD,
    net.PUSH1, "01",
    net.SWAP1,
    net.SUB,
    net.node,

    // Load new node to stack
    net.MLOAD,
    net.PUSH1, net.BUFFER_SIZE_POS,
    net.MLOAD,
].join("");

// PASSING
var rewriteTest = [
    // This test assumes testing with case0
    // Push memory size to stack before rewriting
    net.PUSH1, net.BUFFER_SIZE_POS,
    net.MLOAD,

    // Push nodes contents to stack before rewriting
    net.PUSH1, "00",
    net.node,
    net.MLOAD,

    net.PUSH1, "01",
    net.node,
    net.MLOAD,

    net.PUSH1, "02",
    net.node,
    net.MLOAD,

    net.PUSH1, "03",
    net.node,
    net.MLOAD,

    // Rewrite
    net.PUSH1, "00", // Node 0
    net.PUSH1, "01", // Node 1
    net.rewrite,

    net.PUSH1, "03", // Node 3
    net.PUSH1, "02", // Node 2
    net.rewrite,

    // Push nodes contents to stack after rewriting
    net.PUSH1, "00",
    net.node,
    net.MLOAD,

    net.PUSH1, "01",
    net.node,
    net.MLOAD,

    net.PUSH1, "02",
    net.node,
    net.MLOAD,

    net.PUSH1, "03",
    net.node,
    net.MLOAD,

    net.PUSH1, "04",
    net.node,
    net.MLOAD,

    net.PUSH1, "05",
    net.node,
    net.MLOAD,

    // Push memory size to stack after rewriting
    net.PUSH1, net.BUFFER_SIZE_POS,
    net.MLOAD,
].join("");

// PASSING
var pushTest = [
    // init warp buffer
    net.PUSH1, "00",
    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.MSTORE,

    // Push new values
    net.PUSH2, "FEFE",
    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.push,

    net.PUSH2, "FDFD",
    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.push,

    net.PUSH2, "FCFC",
    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.push,

    // Check included value
    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.DUP1,
    net.MLOAD,
    net.SWAP1,
    net.PUSH1, net.SLOT_SIZE,
    net.PUSH1, "03",
    net.MUL,
    net.ADD,
    net.MLOAD,
].join("");

// PASSING
var incTest = [
    net.PUSH1, net.LOOP_COUNT,
    net.PUSH1, net.REWRITE_COUNT,
    net.PUSH1, net.REWRITE_COUNT,
    net.PUSH1, net.LOOP_COUNT,
    net.PUSH1, net.REWRITE_COUNT,
    net.PUSH1, net.LOOP_COUNT,
    net.PUSH1, net.LOOP_COUNT,
    net.PUSH1, net.REWRITE_COUNT,
    net.PUSH1, net.LOOP_COUNT,
    net.PUSH1, net.REWRITE_COUNT,

    net.inc,
    net.inc,
    net.inc,
    net.inc,
    net.inc,

    net.inc,
    net.inc,
    net.inc,
    net.inc,
    net.inc,

    net.PUSH1, net.LOOP_COUNT,
    net.MLOAD,
    net.PUSH1, "05",
    net.EQ,

    net.PUSH1, net.REWRITE_COUNT,
    net.MLOAD,
    net.PUSH1, "05",
    net.EQ,
].join("");

// PASSING
var popTest = [
    // init warp buffer
    net.PUSH1, "00",
    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.MSTORE,

    // Push new values
    net.PUSH2, "FEFE",
    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.push,

    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.MLOAD,

    net.PUSH2, "FDFD",
    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.push,

    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.MLOAD,

    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.pop,

    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.MLOAD,

    net.PUSH2, "FCFC",
    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.push,

    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.MLOAD,

    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.pop,

    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.MLOAD,

    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.pop,

    net.PUSH2, net.EXIT_BUFFER_INIT,
    net.MLOAD,
].join("");

// NOT PASSING
var reduceTest = [
    net.reduce,

    // Get statistics
    net.PUSH1, net.LOOP_COUNT,
    net.MLOAD,

    net.PUSH1, net.REWRITE_COUNT,
    net.MLOAD,

    // Print net
    net.PUSH1, net.BUFFER_SIZE_POS,
    net.MLOAD,

    net.PUSH1, "00",
    net.node,
    net.MLOAD,

    net.PUSH1, "01",
    net.node,
    net.MLOAD,

    net.PUSH1, "02",
    net.node,
    net.MLOAD,

    net.PUSH1, "03",
    net.node,
    net.MLOAD,

    net.PUSH1, "04",
    net.node,
    net.MLOAD,

    net.PUSH1, "05",
    net.node,
    net.MLOAD,

    net.PUSH1, "06",
    net.node,
    net.MLOAD,

    net.PUSH1, "07",
    net.node,
    net.MLOAD,

    net.PUSH1, "08",
    net.node,
    net.MLOAD,

    net.PUSH1, "09",
    net.node,
    net.MLOAD,

    net.PUSH1, "0A",
    net.node,
    net.MLOAD,

    net.PUSH1, "0B",
    net.node,
    net.MLOAD,

    net.PUSH1, "0C",
    net.node,
    net.MLOAD,

    net.PUSH1, "0D",
    net.node,
    net.MLOAD,

    net.PUSH1, "0E",
    net.node,
    net.MLOAD,

    net.PUSH1, "0F",
    net.node,
    net.MLOAD,

    net.PUSH1, "10",
    net.node,
    net.MLOAD,

    net.PUSH1, "11",
    net.node,
    net.MLOAD,
].join("");


var sizeCalc = [
    net.PC,

    // [BEGIN] Function to measure
    net.PUSH1, "01",
    net.PUSH1, "00",
    net.MLOAD,
    net.ADD,
    net.PUSH1, "00",
    net.MSTORE,
    // [END] Function to measure

    net.PC,
    net.SWAP1,
    net.SUB,
].join("");

// Test data cases

//Dummy. For testing purposes only
var case0 =
["0000000000000000000000000000000000000000000000000000000000000004", // size
 "0000000000000004 0000000000000001 0000000000000002 00000000000000aa", // node 0
 "0000000000000000 0000000000000005 0000000000000006 00000000000000aa", // node 1
 "000000000000000c 0000000000000009 000000000000000a 00000000000000ee", // node 2
 "0000000000000008 000000000000000d 000000000000000e 00000000000000ff", // node 3
].join('').split(' ').join('');

// 2^(2^2)
var case1 =
["0000000000000000000000000000000000000000000000000000000000000011", // size
 "0000000000000004 0000000000000001 0000000000000019 0000000000000001", // node 0
 "0000000000000000 000000000000000C 0000000000000008 0000000000000001", // node 1
 "0000000000000006 0000000000000010 0000000000000014 0000000000000002", // node 2
 "0000000000000005 0000000000000011 0000000000000016 0000000000000001", // node 3
 "0000000000000009 000000000000000D 0000000000000015 0000000000000001", // node 4
 "000000000000000A 0000000000000012 000000000000000E 0000000000000001", // node 5
 "000000000000001C 0000000000000002 0000000000000030 0000000000000001", // node 6
 "0000000000000018 0000000000000024 0000000000000020 0000000000000001", // node 7
 "000000000000001E 0000000000000028 000000000000002C 0000000000000003", // node 8
 "000000000000001D 0000000000000029 000000000000002E 0000000000000001", // node 9
 "0000000000000021 0000000000000025 000000000000002D 0000000000000001", // node 10
 "0000000000000022 000000000000002A 0000000000000026 0000000000000001", // node 11
 "000000000000001A 0000000000000038 0000000000000034 0000000000000001", // node 12
 "0000000000000032 000000000000003C 0000000000000040 0000000000000004", // node 13
 "0000000000000031 000000000000003D 0000000000000042 0000000000000001", // node 14
 "0000000000000035 0000000000000039 0000000000000041 0000000000000001", // node 15
 "0000000000000036 000000000000003E 000000000000003A 0000000000000001", // node 16
].join('').split(' ').join('');

// :not true
var case2 =
[ '000000000000000000000000000000000000000000000000000000000000000a',
  '0000000000000006 0000000000000002 0000000000000001 0000000000000004',
  '0000000000000008 000000000000001c 0000000000000000 0000000000000001',
  '0000000000000004 0000000000000018 000000000000000c 0000000000000001',
  '000000000000000a 0000000000000015 0000000000000010 0000000000000001',
  '000000000000000e 0000000000000019 0000000000000016 0000000000000001',
  '000000000000001a 000000000000000d 0000000000000012 0000000000000001',
  '0000000000000009 0000000000000011 0000000000000014 0000000000000001',
  '0000000000000005 0000000000000022 0000000000000020 0000000000000001',
  '000000000000001e 0000000000000024 000000000000001d 0000000000000001',
  '0000000000000021 0000000000000026 0000000000000025 0000000000000000',
].join('').split(' ').join('');

// 3 * 3
var case3 =
[ '0000000000000000000000000000000000000000000000000000000000000020',
  '0000000000000006 0000000000000002 0000000000000001 0000000000000004',
  '000000000000000a 0000000000000074 0000000000000000 0000000000000001',
  '000000000000000c 0000000000000022 0000000000000004 0000000000000001',
  '0000000000000008 000000000000001d 0000000000000010 0000000000000001',
  '000000000000000e 0000000000000019 0000000000000014 0000000000000001',
  '0000000000000012 000000000000001c 000000000000001a 0000000000000001',
  '000000000000001e 0000000000000011 0000000000000016 0000000000000001',
  '0000000000000015 000000000000000d 0000000000000018 0000000000000001',
  '0000000000000024 0000000000000052 0000000000000009 0000000000000001',
  '0000000000000020 000000000000002c 0000000000000028 0000000000000001',
  '0000000000000026 000000000000004d 000000000000004a 0000000000000001',
  '0000000000000025 0000000000000048 0000000000000030 0000000000000002',
  '000000000000002e 0000000000000040 0000000000000044 0000000000000002',
  '000000000000003c 000000000000004c 0000000000000038 0000000000000002',
  '0000000000000036 000000000000003a 0000000000000039 0000000000000000',
  '0000000000000034 0000000000000045 0000000000000042 0000000000000001',
  '0000000000000031 0000000000000046 000000000000003e 0000000000000001',
  '0000000000000032 000000000000003d 0000000000000041 0000000000000001',
  '000000000000002d 000000000000004e 000000000000002a 0000000000000001',
  '0000000000000035 0000000000000029 0000000000000049 0000000000000001',
  '0000000000000054 0000000000000068 0000000000000021 0000000000000001',
  '0000000000000050 0000000000000064 0000000000000058 0000000000000001',
  '0000000000000056 0000000000000061 000000000000005c 0000000000000001',
  '000000000000005a 0000000000000065 0000000000000062 0000000000000001',
  '0000000000000066 0000000000000059 000000000000005e 0000000000000001',
  '0000000000000055 000000000000005d 0000000000000060 0000000000000001',
  '0000000000000051 000000000000006e 000000000000006c 0000000000000001',
  '000000000000006a 0000000000000070 0000000000000069 0000000000000001',
  '000000000000006d 0000000000000072 0000000000000071 0000000000000000',
  '0000000000000005 0000000000000078 000000000000007c 0000000000000001',
  '0000000000000075 000000000000007a 0000000000000079 0000000000000000',
  '0000000000000076 000000000000007e 000000000000007d 0000000000000001',
].join('').split(' ').join('');



/*
(repeater 3)
/c3 #f #x
    = f1_a f1_b f
    = f1_c f1_d f1_b
    = f2_a -    #x2 :f1_c :f1_d x2
    :f1_a :f2_a x

(pair)
/pair #a #b #t
    ::t a b

(nat zero)
/zer #- #Z
    Z

(nat successor)
/suc #n #S #-
    :S n

(nat multiplication)
/mul #n = mul_a mul_b #m ::m
    #m_pred ::add n :mul_a m_pred
    zer
    mul_b

(test program)
::pair
    ::c3 not true
    ::mul
        :suc :suc :suc zer
        :suc :suc :suc zer

*/
var case4 =
[ '0000000000000000000000000000000000000000000000000000000000000062',
  '0000000000000006 0000000000000002 0000000000000001 0000000000000004',
  '000000000000000a 0000000000000076 0000000000000000 0000000000000001',
  '000000000000000c 0000000000000022 0000000000000004 0000000000000001',
  '0000000000000008 000000000000001d 0000000000000010 0000000000000001',
  '000000000000000e 0000000000000019 0000000000000014 0000000000000001',
  '0000000000000012 000000000000001c 000000000000001a 0000000000000001',
  '000000000000001e 0000000000000011 0000000000000016 0000000000000001',
  '0000000000000015 000000000000000d 0000000000000018 0000000000000001',
  '0000000000000026 0000000000000068 0000000000000009 0000000000000001',
  '0000000000000028 0000000000000054 0000000000000020 0000000000000001',
  '0000000000000024 0000000000000030 000000000000002c 0000000000000001',
  '000000000000002a 0000000000000051 000000000000004e 0000000000000001',
  '0000000000000029 000000000000004c 0000000000000034 0000000000000002',
  '0000000000000032 0000000000000044 0000000000000048 0000000000000002',
  '0000000000000040 0000000000000050 000000000000003c 0000000000000002',
  '000000000000003a 000000000000003e 000000000000003d 0000000000000000',
  '0000000000000038 0000000000000049 0000000000000046 0000000000000001',
  '0000000000000035 000000000000004a 0000000000000042 0000000000000001',
  '0000000000000036 0000000000000041 0000000000000045 0000000000000001',
  '0000000000000031 0000000000000052 000000000000002e 0000000000000001',
  '0000000000000039 000000000000002d 000000000000004d 0000000000000001',
  '0000000000000025 0000000000000064 0000000000000058 0000000000000001',
  '0000000000000056 0000000000000061 000000000000005c 0000000000000001',
  '000000000000005a 0000000000000065 0000000000000062 0000000000000001',
  '0000000000000066 0000000000000059 000000000000005e 0000000000000001',
  '0000000000000055 000000000000005d 0000000000000060 0000000000000001',
  '0000000000000021 000000000000006e 000000000000006c 0000000000000001',
  '000000000000006a 0000000000000070 0000000000000069 0000000000000001',
  '000000000000006d 0000000000000072 0000000000000071 0000000000000000',
  '000000000000007a 0000000000000136 0000000000000005 0000000000000001',
  '000000000000007c 00000000000000e2 0000000000000074 0000000000000001',
  '0000000000000078 0000000000000099 0000000000000082 0000000000000001',
  '0000000000000084 00000000000000d0 000000000000007e 0000000000000002',
  '0000000000000080 000000000000008c 000000000000008a 0000000000000001',
  '000000000000008e 00000000000000d4 0000000000000086 0000000000000001',
  '0000000000000085 0000000000000090 0000000000000088 0000000000000001',
  '000000000000008d 00000000000000d1 0000000000000096 0000000000000001',
  '000000000000009a 00000000000000d2 0000000000000092 0000000000000001',
  '000000000000009e 000000000000007d 0000000000000094 0000000000000001',
  '00000000000000a0 00000000000000c8 0000000000000098 0000000000000002',
  '000000000000009c 00000000000000a8 00000000000000a6 0000000000000001',
  '00000000000000aa 00000000000000cc 00000000000000a2 0000000000000001',
  '00000000000000a1 00000000000000ac 00000000000000a4 0000000000000001',
  '00000000000000a9 00000000000000c9 00000000000000b0 0000000000000001',
  '00000000000000ae 00000000000000c5 00000000000000b4 0000000000000001',
  '00000000000000b2 00000000000000c0 00000000000000b8 0000000000000001',
  '00000000000000b6 00000000000000bc 00000000000000c2 0000000000000001',
  '00000000000000b9 00000000000000be 00000000000000bd 0000000000000000',
  '00000000000000b5 00000000000000c6 00000000000000ba 0000000000000001',
  '00000000000000ca 00000000000000b1 00000000000000c1 0000000000000001',
  '000000000000009d 00000000000000ad 00000000000000c4 0000000000000001',
  '00000000000000a5 00000000000000ce 00000000000000cd 0000000000000001',
  '0000000000000081 0000000000000091 0000000000000095 0000000000000001',
  '0000000000000089 00000000000000d8 00000000000000dc 0000000000000001',
  '00000000000000d5 00000000000000da 00000000000000d9 0000000000000000',
  '00000000000000d6 00000000000000de 00000000000000dd 0000000000000001',
  '00000000000000e4 00000000000000fa 0000000000000079 0000000000000001',
  '00000000000000e0 00000000000000f5 00000000000000e8 0000000000000001',
  '00000000000000e6 00000000000000f4 00000000000000ec 0000000000000001',
  '00000000000000ea 00000000000000f0 00000000000000f6 0000000000000001',
  '00000000000000ed 00000000000000f2 00000000000000f1 0000000000000000',
  '00000000000000e9 00000000000000e5 00000000000000ee 0000000000000001',
  '00000000000000fc 0000000000000112 00000000000000e1 0000000000000001',
  '00000000000000f8 000000000000010d 0000000000000100 0000000000000001',
  '00000000000000fe 000000000000010c 0000000000000104 0000000000000001',
  '0000000000000102 0000000000000108 000000000000010e 0000000000000001',
  '0000000000000105 000000000000010a 0000000000000109 0000000000000000',
  '0000000000000101 00000000000000fd 0000000000000106 0000000000000001',
  '0000000000000114 0000000000000128 00000000000000f9 0000000000000001',
  '0000000000000110 0000000000000125 0000000000000118 0000000000000001',
  '0000000000000116 0000000000000124 000000000000011c 0000000000000001',
  '000000000000011a 0000000000000120 0000000000000126 0000000000000001',
  '000000000000011d 0000000000000122 0000000000000121 0000000000000000',
  '0000000000000119 0000000000000115 000000000000011e 0000000000000001',
  '0000000000000111 000000000000012c 0000000000000130 0000000000000001',
  '0000000000000129 000000000000012e 000000000000012d 0000000000000000',
  '000000000000012a 0000000000000132 0000000000000131 0000000000000001',
  '0000000000000138 000000000000014e 0000000000000075 0000000000000001',
  '0000000000000134 0000000000000149 000000000000013c 0000000000000001',
  '000000000000013a 0000000000000148 0000000000000140 0000000000000001',
  '000000000000013e 0000000000000144 000000000000014a 0000000000000001',
  '0000000000000141 0000000000000146 0000000000000145 0000000000000000',
  '000000000000013d 0000000000000139 0000000000000142 0000000000000001',
  '0000000000000150 0000000000000166 0000000000000135 0000000000000001',
  '000000000000014c 0000000000000161 0000000000000154 0000000000000001',
  '0000000000000152 0000000000000160 0000000000000158 0000000000000001',
  '0000000000000156 000000000000015c 0000000000000162 0000000000000001',
  '0000000000000159 000000000000015e 000000000000015d 0000000000000000',
  '0000000000000155 0000000000000151 000000000000015a 0000000000000001',
  '0000000000000168 000000000000017c 000000000000014d 0000000000000001',
  '0000000000000164 0000000000000179 000000000000016c 0000000000000001',
  '000000000000016a 0000000000000178 0000000000000170 0000000000000001',
  '000000000000016e 0000000000000174 000000000000017a 0000000000000001',
  '0000000000000171 0000000000000176 0000000000000175 0000000000000000',
  '000000000000016d 0000000000000169 0000000000000172 0000000000000001',
  '0000000000000165 0000000000000180 0000000000000184 0000000000000001',
  '000000000000017d 0000000000000182 0000000000000181 0000000000000000',
  '000000000000017e 0000000000000186 0000000000000185 0000000000000001',
].join('').split(' ').join('');



module.exports = {
    // Test Cases
    case0:case0,
    case1:case1,
    case2:case2,
    case3:case3,
    case4:case4,

    // Test Functions
    nodeTest:nodeTest,
    portTest:portTest,
    indexTest:indexTest,
    addrTest:addrTest,
    slotTest:slotTest,
    enterTest:enterTest,
    kindTest:kindTest,
    linkTest:linkTest,
    newNodeTest:newNodeTest,
    rewriteTest:rewriteTest,
    pushTest:pushTest,
    popTest:popTest,
    incTest:incTest,
    reduceTest:reduceTest,
    sizeCalc:sizeCalc,
};
